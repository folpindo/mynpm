{"_id":"memory-cache","_rev":"18-952c875696d8800e00878b9061da3e60","name":"memory-cache","description":"A simple in-memory cache. put() get() and delete()","dist-tags":{"latest":"0.0.5"},"versions":{"0.0.1":{"name":"memory-cache","description":"A simple in-memory cache. put() get() and delete()","author":{"name":"Paul Tarjan","email":"npm@paulisageek.com"},"url":"https://github.com/ptarjan/node-cache","keywords":["cache","ram","simple","storage"],"main":"./index.js","version":"0.0.1","_npmUser":{"name":"ptarjan","email":"npm@paulisageek.com"},"_id":"memory-cache@0.0.1","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.13","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"c93754361aef257f97312dbb5ad9013be8898383","tarball":"http://registry.npmjs.org/memory-cache/-/memory-cache-0.0.1.tgz"},"maintainers":[{"name":"ptarjan","email":"npm@paulisageek.com"}],"directories":{}},"0.0.2":{"name":"memory-cache","description":"A simple in-memory cache. put() get() and delete()","author":{"name":"Paul Tarjan","email":"npm@paulisageek.com"},"url":"https://github.com/ptarjan/node-cache","keywords":["cache","ram","simple","storage"],"main":"./index.js","version":"0.0.2","_npmUser":{"name":"ptarjan","email":"npm@paulisageek.com"},"_id":"memory-cache@0.0.2","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.6.17","_defaultsLoaded":true,"dist":{"shasum":"8e9c629fd1f7fe45b01ec1b4a67305316d64100b","tarball":"http://registry.npmjs.org/memory-cache/-/memory-cache-0.0.2.tgz"},"maintainers":[{"name":"ptarjan","email":"npm@paulisageek.com"}],"directories":{}},"0.0.3":{"name":"memory-cache","description":"A simple in-memory cache. put() get() and delete()","author":{"name":"Paul Tarjan","email":"npm@paulisageek.com"},"url":"https://github.com/ptarjan/node-cache","keywords":["cache","ram","simple","storage"],"main":"./index.js","version":"0.0.3","_npmUser":{"name":"ptarjan","email":"npm@paulisageek.com"},"_id":"memory-cache@0.0.3","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.18","_nodeVersion":"v0.8.2","_defaultsLoaded":true,"dist":{"shasum":"61fda6d4d2d93e78e3853236a8011f1d163c22c3","tarball":"http://registry.npmjs.org/memory-cache/-/memory-cache-0.0.3.tgz"},"maintainers":[{"name":"ptarjan","email":"npm@paulisageek.com"}],"directories":{}},"0.0.4":{"name":"memory-cache","description":"A simple in-memory cache. put() get() and delete()","author":{"name":"Paul Tarjan","email":"npm@paulisageek.com"},"url":"https://github.com/ptarjan/node-cache","keywords":["cache","ram","simple","storage"],"main":"./index.js","version":"0.0.4","repository":{"type":"git","url":"git://github.com/ptarjan/node-cache.git"},"readme":"# node-cache\n\nA simple in-memory cache for node.js\n\n## Installation\n\n    npm install memory-cache\n\n## Usage\n\n    var cache = require('memory-cache');\n\n    // now just use the cache\n\n    cache.put('foo', 'bar');\n    console.log(cache.get('foo'))\n\n    // that wasn't too interesting, here's the good part\n\n    cache.put('houdini', 'disapear', 100) // Time in ms\n    console.log('Houdini will now ' + cache.get('houdini'));\n\n    setTimeout(function() {\n      console.log('Houdini is ' + cache.get('houdini'));\n    }, 200);\n\nwhich should print\n\n    bar\n    Houdini will now disapear\n    Houdini is null\n\n## API\n\n### put = function(key, value, time)\n\n* Simply stores a value. \n* If time isn't passed in, it is stored forever.\n* Will actually remove the value in the specified time (via `setTimeout`)\n\n### get = function(key)\n\n* Retreives a value for a given key\n\n### del = function(key)\n\n* Deletes a key\n\n### clear = function()\n\n* Deletes all keys\n\n### size = function()\n\n* Returns the current number of entries in the cache\n\n### memsize = function()\n\n* Returns the number of entries taking up space in the cache\n* Will usually `== size()` unless a `setTimeout` removal went wrong\n\n### debug = function(bool)\n\n* Turns on or off debugging\n\n### hits = function()\n\n* Returns the number of cache hits\n\n### misses = function()\n\n* Returns the number of cache misses.\n\n## TODO\n\n* Namespaces\n* A way of walking the cache for diagnostic purposes\n\n## Note on Patches/Pull Requests\n \n* Fork the project.\n* Make your feature addition or bug fix.\n* Send me a pull request.\n","_id":"memory-cache@0.0.4","dist":{"shasum":"b673560b103f2db3ff3c66921ea66acecadaf04f","tarball":"http://registry.npmjs.org/memory-cache/-/memory-cache-0.0.4.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"ptarjan","email":"npm@paulisageek.com"},"maintainers":[{"name":"ptarjan","email":"npm@paulisageek.com"}],"directories":{}},"0.0.5":{"name":"memory-cache","description":"A simple in-memory cache. put() get() and delete()","author":{"name":"Paul Tarjan","email":"npm@paulisageek.com"},"url":"https://github.com/ptarjan/node-cache","keywords":["cache","ram","simple","storage"],"main":"./index.js","version":"0.0.5","repository":{"type":"git","url":"git://github.com/ptarjan/node-cache.git"},"readme":"# node-cache\n\nA simple in-memory cache for node.js\n\n## Installation\n\n    npm install memory-cache\n\n## Usage\n\n    var cache = require('memory-cache');\n\n    // now just use the cache\n\n    cache.put('foo', 'bar');\n    console.log(cache.get('foo'))\n\n    // that wasn't too interesting, here's the good part\n\n    cache.put('houdini', 'disapear', 100) // Time in ms\n    console.log('Houdini will now ' + cache.get('houdini'));\n\n    setTimeout(function() {\n      console.log('Houdini is ' + cache.get('houdini'));\n    }, 200);\n\nwhich should print\n\n    bar\n    Houdini will now disapear\n    Houdini is null\n\n## API\n\n### put = function(key, value, time)\n\n* Simply stores a value. \n* If time isn't passed in, it is stored forever.\n* Will actually remove the value in the specified time (via `setTimeout`)\n\n### get = function(key)\n\n* Retreives a value for a given key\n\n### del = function(key)\n\n* Deletes a key\n\n### clear = function()\n\n* Deletes all keys\n\n### size = function()\n\n* Returns the current number of entries in the cache\n\n### memsize = function()\n\n* Returns the number of entries taking up space in the cache\n* Will usually `== size()` unless a `setTimeout` removal went wrong\n\n### debug = function(bool)\n\n* Turns on or off debugging\n\n### hits = function()\n\n* Returns the number of cache hits\n\n### misses = function()\n\n* Returns the number of cache misses.\n\n## TODO\n\n* Namespaces\n* A way of walking the cache for diagnostic purposes\n\n## Note on Patches/Pull Requests\n \n* Fork the project.\n* Make your feature addition or bug fix.\n* Send me a pull request.\n","readmeFilename":"README.md","_id":"memory-cache@0.0.5","dist":{"shasum":"dbf99a56d7362c43eccaf39f0ba6f97f31a06786","tarball":"http://registry.npmjs.org/memory-cache/-/memory-cache-0.0.5.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"ptarjan","email":"npm@paulisageek.com"},"maintainers":[{"name":"ptarjan","email":"npm@paulisageek.com"}],"directories":{}}},"readme":"# node-cache\n\nA simple in-memory cache for node.js\n\n## Installation\n\n    npm install memory-cache\n\n## Usage\n\n    var cache = require('memory-cache');\n\n    // now just use the cache\n\n    cache.put('foo', 'bar');\n    console.log(cache.get('foo'))\n\n    // that wasn't too interesting, here's the good part\n\n    cache.put('houdini', 'disapear', 100) // Time in ms\n    console.log('Houdini will now ' + cache.get('houdini'));\n\n    setTimeout(function() {\n      console.log('Houdini is ' + cache.get('houdini'));\n    }, 200);\n\nwhich should print\n\n    bar\n    Houdini will now disapear\n    Houdini is null\n\n## API\n\n### put = function(key, value, time)\n\n* Simply stores a value. \n* If time isn't passed in, it is stored forever.\n* Will actually remove the value in the specified time (via `setTimeout`)\n\n### get = function(key)\n\n* Retreives a value for a given key\n\n### del = function(key)\n\n* Deletes a key\n\n### size = function()\n\n* Returns the current number of entries in the cache\n\n### memsize = function()\n\n* Returns the number of entries taking up space in the cache\n* Will usually `== size()` unless a `setTimeout` removal went wrong\n\n### debug = function(bool)\n\n* Turns on or off debugging\n\n### hits = function()\n\n* Returns the number of cache hits\n\n### misses = function()\n\n* Returns the number of cache misses.\n\n## TODO\n\n* Namespaces\n* A way of walking the cache for diagnostic purposes\n\n## Note on Patches/Pull Requests\n \n* Fork the project.\n* Make your feature addition or bug fix.\n* Send me a pull request.\n","maintainers":[{"name":"ptarjan","email":"npm@paulisageek.com"}],"time":{"modified":"2013-02-05T10:06:46.303Z","created":"2012-03-31T08:29:06.319Z","0.0.1":"2012-03-31T08:29:07.683Z","0.0.2":"2012-05-17T22:34:23.333Z","0.0.3":"2012-08-07T09:19:31.941Z","0.0.4":"2012-09-18T03:46:36.181Z","0.0.5":"2013-02-05T10:06:46.303Z"},"author":{"name":"Paul Tarjan","email":"npm@paulisageek.com"},"repository":{"type":"git","url":"git://github.com/ptarjan/node-cache.git"},"users":{"aradnom":true,"leventkaragol":true,"lianall":true,"zhangyaochun":true,"c1freitas":true,"brandonb927":true,"adamlu":true},"_attachments":{},"_etag":"\"86BGKTNUCGTU8NTGMGIABYL63\""}